name: Dockerfile Lint

# When this workflow runs
on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/hadolint.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/hadolint.yml'
  workflow_dispatch: # Allows manual trigger from GitHub UI

# Permissions needed for the workflow
permissions:
  contents: read
  pull-requests: write  # Needed to comment on PRs
  issues: write        # Needed to comment on issues

jobs:
  lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Run Hadolint on the Dockerfile
      - name: Run Hadolint
        id: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          # Set the format for the output (tty is colored, json for parsing)
          format: tty
          # Uncomment below to make the build fail on any warning
          # failure-threshold: warning
      
      # Step 3: Comment on PR with results (only on pull requests)
      - name: Update PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const status = '${{ steps.hadolint.outcome }}';
            const statusEmoji = status === 'success' ? '‚úÖ' : '‚ùå';
            const statusText = status === 'success' ? 'Passed' : 'Failed';
            
            const output = `## Dockerfile Lint Results ${statusEmoji}

            **AICI NE JUCAM PING-PONG**
            
            **Status:** ${statusText}
            **File:** Dockerfile
            **Linter:** Hadolint
            
            ${status !== 'success' ? '‚ö†Ô∏è Please check the workflow logs for details about the issues found.' : 'üéâ All checks passed! Your Dockerfile follows best practices.'}
            
            ---
            *Triggered by @${{ github.actor }} via ${{ github.event_name }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        continue-on-error: true
